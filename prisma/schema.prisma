// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator and datasource were copied from Planetscale Schema
// plantetscale db name was twitter-along
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    
// Application Schema

 model Tweet {
    // fields
    id String @id @default(uuid())
    userId String
    content String
    createdAt DateTime @default(now())

// relations
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
likes Like[]

// index
@@unique([createdAt, id])
@@index([userId])
 }

model Like {
userId String
tweetId String
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
Tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)

@@id([userId, tweetId])
@@index([userId])
@@index([tweetId])
}


// need to manually remove text commenting that was below
// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    // need to add the next line in manually
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    // need to add the next line in manually
    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    // Non-next-auth
    tweets   Tweet[]
    likes Like[]
    followers User[] @relation(name: "Followers")
    follows User[] @relation(name: "Followers")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
